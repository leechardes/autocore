#!/bin/bash

# AutoTech HMI Display ESP32 - Development Manager
# Ferramenta completa de desenvolvimento e debug

PROJETO_DIR="/Users/leechardes/Projetos/autocore/firmware/autotech_hmi_display_v2"
PORTA_SERIAL="/dev/cu.usbserial-2110"
VELOCIDADE="115200"

# Cores para interface
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Fun√ß√£o para limpar tela
clear_screen() {
    clear
}

# Fun√ß√£o para mostrar cabe√ßalho
show_header() {
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                    ${WHITE}üöó AutoTech HMI Display ESP32${CYAN}                    ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                        ${YELLOW}Development Manager${CYAN}                          ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${BLUE}üìÇ Projeto: ${WHITE}$PROJETO_DIR${NC}"
    echo -e "${BLUE}üì° Porta: ${WHITE}$PORTA_SERIAL${NC}"
    echo -e "${BLUE}‚ö° Velocidade: ${WHITE}$VELOCIDADE baud${NC}"
    echo ""
}

# Fun√ß√£o para mostrar menu principal
show_menu() {
    echo -e "${GREEN}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Op√ß√µes Dispon√≠veis ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}1.${NC} üìä ${CYAN}Monitor Serial${NC} (Ver logs em tempo real)              ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}2.${NC} ‚¨ÜÔ∏è  ${CYAN}Upload Firmware${NC} (Compilar e enviar)                 ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}3.${NC} üîÑ ${CYAN}Upload + Monitor${NC} (Upload e iniciar monitor)          ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}4.${NC} üîß ${CYAN}Apenas Compilar${NC} (Build sem upload)                  ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}5.${NC} üßπ ${CYAN}Limpar Build${NC} (Clean do projeto)                     ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}6.${NC} ‚ÑπÔ∏è  ${CYAN}Info do Sistema${NC} (Status do ESP32)                   ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}7.${NC} üîç ${CYAN}Listar Portas${NC} (Ver portas dispon√≠veis)              ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}8.${NC} ‚öôÔ∏è  ${CYAN}Configura√ß√µes${NC} (Alterar porta/velocidade)           ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ${NC}  ${WHITE}0.${NC} üö™ ${RED}Sair${NC}                                                 ${GREEN}‚îÇ${NC}"
    echo -e "${GREEN}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    echo ""
}

# Fun√ß√£o para verificar se est√° no diret√≥rio correto
check_directory() {
    if [ ! -f "platformio.ini" ]; then
        echo -e "${RED}‚ùå Erro: platformio.ini n√£o encontrado!${NC}"
        echo -e "${YELLOW}   Navegando para o diret√≥rio do projeto...${NC}"
        cd "$PROJETO_DIR" || {
            echo -e "${RED}‚ùå Erro: Diret√≥rio do projeto n√£o encontrado!${NC}"
            exit 1
        }
    fi
}

# Fun√ß√£o para verificar se a porta existe
check_port() {
    if [ ! -e "$PORTA_SERIAL" ]; then
        echo -e "${RED}‚ùå Erro: Porta $PORTA_SERIAL n√£o encontrada!${NC}"
        echo -e "${YELLOW}üí° Dica: Use a op√ß√£o 7 para listar portas dispon√≠veis${NC}"
        return 1
    fi
    return 0
}

# Fun√ß√£o para monitor serial
start_monitor() {
    echo -e "${CYAN}üñ•Ô∏è  Iniciando Monitor Serial...${NC}"
    echo -e "${YELLOW}üìç Porta: $PORTA_SERIAL${NC}"
    echo -e "${YELLOW}‚ö° Velocidade: $VELOCIDADE baud${NC}"
    echo -e "${YELLOW}üîÑ Pressione Ctrl+C para parar${NC}"
    echo ""
    
    if ! check_port; then
        read -p "Pressione Enter para continuar..."
        return
    fi
    
    echo -e "${GREEN}‚ñ∂Ô∏è  Monitor iniciado:${NC}"
    echo "========================================"
    
    pio device monitor --port "$PORTA_SERIAL" --baud "$VELOCIDADE" || {
        echo -e "${RED}‚ùå Erro ao iniciar monitor serial${NC}"
        read -p "Pressione Enter para continuar..."
    }
}

# Fun√ß√£o para upload
do_upload() {
    echo -e "${CYAN}‚¨ÜÔ∏è  Iniciando Upload...${NC}"
    
    # Reset do ESP32
    echo -e "${YELLOW}üîÑ Resetando ESP32...${NC}"
    if command -v esptool.py >/dev/null 2>&1; then
        esptool.py --port "$PORTA_SERIAL" --baud "$VELOCIDADE" run >/dev/null 2>&1
        sleep 2
    fi
    
    echo -e "${YELLOW}üî® Compilando e fazendo upload...${NC}"
    echo ""
    
    if pio run -t upload; then
        echo ""
        echo -e "${GREEN}‚úÖ Upload realizado com sucesso!${NC}"
        return 0
    else
        echo ""
        echo -e "${RED}‚ùå Erro durante o upload!${NC}"
        return 1
    fi
}

# Fun√ß√£o para upload + monitor
upload_and_monitor() {
    if do_upload; then
        echo ""
        echo -e "${CYAN}üîÑ Aguardando 3 segundos antes de iniciar monitor...${NC}"
        sleep 3
        start_monitor
    else
        read -p "Pressione Enter para continuar..."
    fi
}

# Fun√ß√£o para apenas compilar
compile_only() {
    echo -e "${CYAN}üîß Compilando projeto...${NC}"
    echo ""
    
    if pio run; then
        echo ""
        echo -e "${GREEN}‚úÖ Compila√ß√£o realizada com sucesso!${NC}"
    else
        echo ""
        echo -e "${RED}‚ùå Erro durante a compila√ß√£o!${NC}"
    fi
    
    read -p "Pressione Enter para continuar..."
}

# Fun√ß√£o para limpar build
clean_build() {
    echo -e "${CYAN}üßπ Limpando arquivos de build...${NC}"
    
    if pio run -t clean; then
        echo -e "${GREEN}‚úÖ Build limpo com sucesso!${NC}"
    else
        echo -e "${RED}‚ùå Erro ao limpar build!${NC}"
    fi
    
    read -p "Pressione Enter para continuar..."
}

# Fun√ß√£o para mostrar info do sistema
show_system_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  Informa√ß√µes do Sistema${NC}"
    echo "========================================"
    
    echo -e "${YELLOW}PlatformIO:${NC}"
    pio --version 2>/dev/null || echo "  ‚ùå PlatformIO n√£o encontrado"
    
    echo ""
    echo -e "${YELLOW}Porta Serial:${NC}"
    if [ -e "$PORTA_SERIAL" ]; then
        echo -e "  ‚úÖ $PORTA_SERIAL (dispon√≠vel)"
    else
        echo -e "  ‚ùå $PORTA_SERIAL (n√£o encontrado)"
    fi
    
    echo ""
    echo -e "${YELLOW}Projeto:${NC}"
    if [ -f "platformio.ini" ]; then
        echo "  ‚úÖ platformio.ini encontrado"
        echo "  üìã Configura√ß√£o:"
        grep -E "board|platform|framework" platformio.ini | head -3 | sed 's/^/    /'
    else
        echo "  ‚ùå platformio.ini n√£o encontrado"
    fi
    
    echo ""
    echo -e "${YELLOW}Espa√ßo em disco:${NC}"
    df -h . | tail -1 | awk '{print "  üíæ Dispon√≠vel: " $4 " de " $2}'
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# Fun√ß√£o para listar portas
list_ports() {
    echo -e "${CYAN}üîç Portas Seriais Dispon√≠veis${NC}"
    echo "========================================"
    
    echo -e "${YELLOW}Portas USB/Serial encontradas:${NC}"
    
    # macOS
    if ls /dev/cu.* 2>/dev/null; then
        echo ""
        echo -e "${YELLOW}Detalhes das portas:${NC}"
        for port in /dev/cu.*; do
            if [[ "$port" == *"usbserial"* ]] || [[ "$port" == *"usbmodem"* ]]; then
                echo -e "  üì° $port ${GREEN}(poss√≠vel ESP32)${NC}"
            else
                echo -e "  üì° $port"
            fi
        done
    else
        echo -e "${RED}  ‚ùå Nenhuma porta serial encontrada${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}Porta atual configurada:${NC} $PORTA_SERIAL"
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# Fun√ß√£o para configura√ß√µes
configure_settings() {
    while true; do
        clear_screen
        echo -e "${CYAN}‚öôÔ∏è  Configura√ß√µes${NC}"
        echo "========================================"
        echo -e "${YELLOW}Configura√ß√µes atuais:${NC}"
        echo -e "  üì° Porta: ${WHITE}$PORTA_SERIAL${NC}"
        echo -e "  ‚ö° Velocidade: ${WHITE}$VELOCIDADE baud${NC}"
        echo ""
        echo -e "${GREEN}1.${NC} Alterar porta serial"
        echo -e "${GREEN}2.${NC} Alterar velocidade"
        echo -e "${GREEN}0.${NC} Voltar ao menu principal"
        echo ""
        
        read -p "Escolha uma op√ß√£o: " config_option
        
        case $config_option in
            1)
                echo ""
                echo -e "${CYAN}Digite a nova porta serial:${NC}"
                read -p "Porta (ex: /dev/cu.usbserial-210): " nova_porta
                if [ -n "$nova_porta" ]; then
                    PORTA_SERIAL="$nova_porta"
                    echo -e "${GREEN}‚úÖ Porta alterada para: $PORTA_SERIAL${NC}"
                fi
                sleep 2
                ;;
            2)
                echo ""
                echo -e "${CYAN}Digite a nova velocidade:${NC}"
                echo -e "${YELLOW}Op√ß√µes comuns: 9600, 115200, 230400${NC}"
                read -p "Velocidade: " nova_velocidade
                if [ -n "$nova_velocidade" ]; then
                    VELOCIDADE="$nova_velocidade"
                    echo -e "${GREEN}‚úÖ Velocidade alterada para: $VELOCIDADE baud${NC}"
                fi
                sleep 2
                ;;
            0)
                break
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Fun√ß√£o principal
main() {
    # Verificar se est√° no diret√≥rio correto
    check_directory
    
    while true; do
        clear_screen
        show_header
        show_menu
        
        read -p "Escolha uma op√ß√£o: " opcao
        
        case $opcao in
            1)
                clear_screen
                start_monitor
                ;;
            2)
                clear_screen
                do_upload
                read -p "Pressione Enter para continuar..."
                ;;
            3)
                clear_screen
                upload_and_monitor
                ;;
            4)
                clear_screen
                compile_only
                ;;
            5)
                clear_screen
                clean_build
                ;;
            6)
                clear_screen
                show_system_info
                ;;
            7)
                clear_screen
                list_ports
                ;;
            8)
                configure_settings
                ;;
            0)
                echo -e "${GREEN}üëã At√© logo!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida! Tente novamente.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Executar fun√ß√£o principal
main