# ESP32 Relay ESP-IDF - Makefile
# Build, flash e monitoramento para projeto ESP-IDF

# Configura√ß√µes
PORT ?= /dev/cu.usbserial-0001
BAUD_RATE ?= 115200
IDF_PATH ?= $(HOME)/esp/esp-idf
PROJECT_NAME = esp32-relay
CHIP ?= esp32

# Detecta se ESP-IDF est√° ativo
ifdef IDF_PYTHON_ENV_PATH
    # Usa Python do ESP-IDF se estiver ativo
    PYTHON = $(IDF_PYTHON_ENV_PATH)/bin/python
    PIP = $(IDF_PYTHON_ENV_PATH)/bin/pip
    IDF_ACTIVE = true
else
    # Usa Python do sistema se ESP-IDF n√£o estiver ativo
    PYTHON = python3
    PIP = pip3
    IDF_ACTIVE = false
endif

# Cores para output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
CYAN = \033[0;36m
NC = \033[0m # No Color

# Detectar sistema operacional
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
    MONITOR_FILTER = --filter esp32_exception_decoder
endif

.PHONY: help install setup build flash monitor clean fullclean menuconfig size ota status test

help: ## Mostra todos os comandos dispon√≠veis
	@echo "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
	@echo "${CYAN}‚ïë          ESP32 Relay ESP-IDF - Build System             ‚ïë${NC}"
	@echo "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
	@echo ""
	@echo "${YELLOW}Comandos dispon√≠veis:${NC}"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "${GREEN}%-20s${NC} %s\n", $$1, $$2}'
	@echo ""
	@echo "${YELLOW}Vari√°veis de ambiente:${NC}"
	@echo "  PORT=${PORT}"
	@echo "  BAUD_RATE=${BAUD_RATE}"
	@echo "  CHIP=${CHIP}"
	@echo "  IDF_PATH=${IDF_PATH}"

# ============================================================================
# VERIFICA√á√ÉO DO AMBIENTE
# ============================================================================

check-idf: ## Verifica se ESP-IDF est√° ativo
	@if [ "$(IDF_ACTIVE)" = "false" ]; then \
		echo "${RED}‚ùå ESP-IDF n√£o est√° ativo!${NC}"; \
		echo "${YELLOW}Execute primeiro:${NC}"; \
		echo "${GREEN}  source ~/esp/esp-idf/export.sh${NC}"; \
		echo ""; \
		echo "${YELLOW}Ou use o script de ativa√ß√£o:${NC}"; \
		echo "${GREEN}  source activate.sh${NC}"; \
		exit 1; \
	else \
		echo "${GREEN}‚úÖ ESP-IDF ativo${NC}"; \
		echo "  IDF_PATH: $(IDF_PATH)"; \
		echo "  Python: $(PYTHON)"; \
	fi

# ============================================================================
# SETUP E INSTALA√á√ÉO
# ============================================================================

install: ## Instala ESP-IDF e depend√™ncias
	@echo "${BLUE}üì¶ Instalando ESP-IDF e depend√™ncias...${NC}"
	@$(PYTHON) scripts/install_esp_idf.py
	@echo "${GREEN}‚úÖ ESP-IDF instalado com sucesso!${NC}"

setup: ## Configura ambiente ESP-IDF
	@echo "${BLUE}üîß Configurando ambiente ESP-IDF...${NC}"
	@if [ ! -d "$(IDF_PATH)" ]; then \
		echo "${RED}‚ùå ESP-IDF n√£o encontrado em $(IDF_PATH)${NC}"; \
		echo "${YELLOW}Execute 'make install' primeiro${NC}"; \
		exit 1; \
	fi
	@echo "source $(IDF_PATH)/export.sh" >> ~/.bashrc 2>/dev/null || true
	@echo "source $(IDF_PATH)/export.sh" >> ~/.zshrc 2>/dev/null || true
	@echo "${GREEN}‚úÖ Ambiente configurado!${NC}"
	@echo "${YELLOW}‚ÑπÔ∏è  Execute 'source $(IDF_PATH)/export.sh' no terminal atual${NC}"

check-env: check-idf ## Verifica se o ambiente est√° configurado
	@$(PYTHON) scripts/check_environment.py

# ============================================================================
# BUILD E COMPILA√á√ÉO
# ============================================================================

build: check-idf ## Compila o projeto
	@echo "${BLUE}üî® Compilando projeto ESP32 Relay...${NC}"
	@$(PYTHON) scripts/pre_build.py
	idf.py build
	@$(PYTHON) scripts/post_build.py
	@echo "${GREEN}‚úÖ Build conclu√≠do com sucesso!${NC}"

rebuild: clean build ## Limpa e recompila o projeto

build-verbose: check-env ## Build com output detalhado
	@echo "${BLUE}üî® Build verbose...${NC}"
	idf.py -v build

# ============================================================================
# FLASH E MONITORAMENTO
# ============================================================================

flash: ## Grava firmware no ESP32
	@echo "${BLUE}üì§ Gravando firmware no ESP32...${NC}"
	@$(PYTHON) scripts/check_port.py $(PORT)
	idf.py -p $(PORT) -b $(BAUD_RATE) flash
	@echo "${GREEN}‚úÖ Firmware gravado com sucesso!${NC}"

monitor: ## Monitor serial do ESP32
	@echo "${CYAN}üì∫ Monitor Serial ESP32${NC}"
	@echo "${YELLOW}Pressione Ctrl+] para sair${NC}"
	@echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	idf.py -p $(PORT) monitor

flash-monitor: flash monitor ## Flash + Monitor em sequ√™ncia

dev: rebuild flash-monitor ## Rebuild + Flash + Monitor (desenvolvimento)

# ============================================================================
# CONFIGURA√á√ÉO
# ============================================================================

menuconfig: ## Abre menu de configura√ß√£o do ESP-IDF
	@echo "${BLUE}‚öôÔ∏è  Configura√ß√£o do projeto...${NC}"
	idf.py menuconfig

config: menuconfig ## Alias para menuconfig

defconfig: ## Restaura configura√ß√£o padr√£o
	@echo "${YELLOW}‚ö†Ô∏è  Restaurando configura√ß√£o padr√£o...${NC}"
	@cp sdkconfig.defaults sdkconfig
	@echo "${GREEN}‚úÖ Configura√ß√£o restaurada!${NC}"

saveconfig: ## Salva configura√ß√£o atual como padr√£o
	@echo "${BLUE}üíæ Salvando configura√ß√£o atual...${NC}"
	@cp sdkconfig sdkconfig.defaults
	@echo "${GREEN}‚úÖ Configura√ß√£o salva!${NC}"

# ============================================================================
# LIMPEZA
# ============================================================================

clean: ## Limpa arquivos de build
	@echo "${YELLOW}üßπ Limpando build...${NC}"
	idf.py clean
	@echo "${GREEN}‚úÖ Build limpo!${NC}"

fullclean: ## Limpa tudo (build + config)
	@echo "${RED}üóëÔ∏è  Limpeza completa...${NC}"
	idf.py fullclean
	@rm -f sdkconfig sdkconfig.old
	@echo "${GREEN}‚úÖ Limpeza completa!${NC}"

distclean: fullclean ## Limpa tudo incluindo downloads
	@echo "${RED}üóëÔ∏è  Removendo componentes baixados...${NC}"
	@rm -rf managed_components
	@rm -rf .espressif
	@echo "${GREEN}‚úÖ Distclean completo!${NC}"

# ============================================================================
# AN√ÅLISE E DEBUG
# ============================================================================

size: ## Analisa tamanho do firmware
	@echo "${BLUE}üìä An√°lise de tamanho do firmware:${NC}"
	idf.py size
	@echo ""
	@echo "${CYAN}Componentes por tamanho:${NC}"
	idf.py size-components

size-files: ## Mostra tamanho detalhado por arquivo
	@echo "${BLUE}üìä Tamanho por arquivo:${NC}"
	idf.py size-files

partition-table: ## Mostra tabela de parti√ß√µes
	@echo "${BLUE}üíæ Tabela de parti√ß√µes:${NC}"
	idf.py partition-table

# ============================================================================
# OTA (Over-The-Air Update)
# ============================================================================

ota: ## Atualiza√ß√£o OTA via rede
	@echo "${BLUE}üì° Iniciando atualiza√ß√£o OTA...${NC}"
	@$(PYTHON) scripts/ota_update.py
	@echo "${GREEN}‚úÖ OTA conclu√≠do!${NC}"

ota-server: ## Inicia servidor OTA local
	@echo "${BLUE}üåê Servidor OTA na porta 8070...${NC}"
	@$(PYTHON) scripts/ota_server.py

# ============================================================================
# TESTES E VALIDA√á√ÉO
# ============================================================================

test: ## Executa testes unit√°rios
	@echo "${BLUE}üß™ Executando testes...${NC}"
	@$(PYTHON) scripts/run_tests.py
	@echo "${GREEN}‚úÖ Testes conclu√≠dos!${NC}"

test-mqtt: ## Testa conex√£o MQTT
	@echo "${BLUE}üì° Testando MQTT...${NC}"
	@$(PYTHON) scripts/test_mqtt.py
	
test-http: ## Testa endpoints HTTP
	@echo "${BLUE}üåê Testando HTTP...${NC}"
	@$(PYTHON) scripts/test_http.py

validate: ## Valida configura√ß√£o e c√≥digo
	@echo "${BLUE}‚úîÔ∏è  Validando projeto...${NC}"
	@$(PYTHON) scripts/validate_project.py

# ============================================================================
# FERRAMENTAS E UTILIDADES
# ============================================================================

list-ports: ## Lista todas as portas USB/Serial dispon√≠veis
	@$(PYTHON) scripts/list_ports.py || { \
		echo "${CYAN}üîå Portas USB/Serial dispon√≠veis (fallback):${NC}"; \
		echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"; \
		if [ "$(UNAME_S)" = "Darwin" ]; then \
			ls -la /dev/cu.* 2>/dev/null | awk '{print NR". " $$9}' | grep -E "usb|serial" || echo "Nenhuma porta USB encontrada"; \
		else \
			ls -la /dev/ttyUSB* /dev/ttyACM* 2>/dev/null | awk '{print NR". " $$9}' || echo "Nenhuma porta USB encontrada"; \
		fi; \
		echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"; \
	}
	@echo ""
	@echo "${YELLOW}Porta atual configurada: ${GREEN}$(PORT)${NC}"

ports: list-ports ## Alias para list-ports

select-port: ## Seleciona porta USB interativamente
	@echo "${CYAN}üîå Sele√ß√£o de Porta USB/Serial${NC}"
	@echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	@if [ "$(UNAME_S)" = "Darwin" ]; then \
		ports=$$(ls /dev/cu.* 2>/dev/null | grep -E "usb|serial"); \
	else \
		ports=$$(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null); \
	fi; \
	if [ -z "$$ports" ]; then \
		echo "${RED}‚ùå Nenhuma porta USB encontrada${NC}"; \
		exit 1; \
	fi; \
	echo "Portas dispon√≠veis:"; \
	echo "$$ports" | nl; \
	echo ""; \
	read -p "Digite o n√∫mero da porta desejada: " port_num; \
	selected=$$(echo "$$ports" | sed -n "$${port_num}p"); \
	if [ -n "$$selected" ]; then \
		echo "${GREEN}‚úÖ Porta selecionada: $$selected${NC}"; \
		echo ""; \
		echo "${YELLOW}Para tornar permanente, adicione ao Makefile:${NC}"; \
		echo "${CYAN}PORT = $$selected${NC}"; \
		echo ""; \
		echo "${YELLOW}Ou exporte a vari√°vel:${NC}"; \
		echo "${CYAN}export PORT=$$selected${NC}"; \
		echo ""; \
		read -p "Deseja usar esta porta agora? (s/N): " use_now; \
		if [ "$$use_now" = "s" ]; then \
			$(MAKE) PORT=$$selected monitor; \
		fi; \
	else \
		echo "${RED}‚ùå Sele√ß√£o inv√°lida${NC}"; \
	fi

configure: ## Configura porta e outras op√ß√µes interativamente
	@echo "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
	@echo "${CYAN}‚ïë            Configura√ß√£o Interativa ESP32-Relay          ‚ïë${NC}"
	@echo "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
	@echo ""
	@echo "${YELLOW}1. Configura√ß√£o de Porta${NC}"
	@echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	@if [ "$(UNAME_S)" = "Darwin" ]; then \
		ports=$$(ls /dev/cu.* 2>/dev/null | grep -E "usb|serial"); \
	else \
		ports=$$(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null); \
	fi; \
	if [ -z "$$ports" ]; then \
		echo "${RED}‚ùå Nenhuma porta USB encontrada${NC}"; \
		selected_port="$(PORT)"; \
	else \
		echo "Portas dispon√≠veis:"; \
		echo "$$ports" | nl; \
		echo "0. Manter atual ($(PORT))"; \
		echo ""; \
		read -p "Digite o n√∫mero da porta (0 para manter): " port_num; \
		if [ "$$port_num" = "0" ] || [ -z "$$port_num" ]; then \
			selected_port="$(PORT)"; \
		else \
			selected_port=$$(echo "$$ports" | sed -n "$${port_num}p"); \
		fi; \
	fi; \
	echo "${GREEN}‚úÖ Porta: $$selected_port${NC}"; \
	echo ""; \
	echo "${YELLOW}2. Configura√ß√£o de Baud Rate${NC}"; \
	echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	echo "1. 115200 (padr√£o)"
	echo "2. 230400"
	echo "3. 460800"
	echo "4. 921600"
	echo "0. Manter atual ($(BAUD_RATE))"
	echo ""
	read -p "Digite o n√∫mero do baud rate (0 para manter): " baud_num
	case "$$baud_num" in \
		1) selected_baud="115200" ;; \
		2) selected_baud="230400" ;; \
		3) selected_baud="460800" ;; \
		4) selected_baud="921600" ;; \
		*) selected_baud="$(BAUD_RATE)" ;; \
	esac
	echo "${GREEN}‚úÖ Baud Rate: $$selected_baud${NC}"
	echo ""
	echo "${YELLOW}3. A√ß√£o a executar${NC}"
	echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
	echo "1. Monitor Serial"
	echo "2. Build"
	echo "3. Flash"
	echo "4. Flash + Monitor"
	echo "5. Build + Flash + Monitor"
	echo "6. Menuconfig"
	echo "7. Erase Flash"
	echo "0. Apenas salvar configura√ß√£o"
	echo ""
	read -p "Digite o n√∫mero da a√ß√£o: " action_num
	echo ""
	echo "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
	echo "${CYAN}‚ïë                    Configura√ß√£o Final                    ‚ïë${NC}"
	echo "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
	echo "  Porta: $$selected_port"
	echo "  Baud Rate: $$selected_baud"
	echo ""
	echo "${YELLOW}Para tornar permanente, edite o Makefile:${NC}"
	echo "${CYAN}PORT = $$selected_port${NC}"
	echo "${CYAN}BAUD_RATE = $$selected_baud${NC}"
	echo ""
	echo "${YELLOW}Ou exporte as vari√°veis:${NC}"
	echo "${CYAN}export PORT=$$selected_port${NC}"
	echo "${CYAN}export BAUD_RATE=$$selected_baud${NC}"
	echo ""
	case "$$action_num" in \
		1) $(MAKE) PORT=$$selected_port BAUD_RATE=$$selected_baud monitor ;; \
		2) $(MAKE) build ;; \
		3) $(MAKE) PORT=$$selected_port BAUD_RATE=$$selected_baud flash ;; \
		4) $(MAKE) PORT=$$selected_port BAUD_RATE=$$selected_baud flash-monitor ;; \
		5) $(MAKE) PORT=$$selected_port BAUD_RATE=$$selected_baud dev ;; \
		6) $(MAKE) menuconfig ;; \
		7) $(MAKE) PORT=$$selected_port erase ;; \
		*) echo "${GREEN}‚úÖ Configura√ß√£o salva (use as vari√°veis acima)${NC}" ;; \
	esac

status: ## Mostra status do ESP32 conectado
	@echo "${CYAN}üìä Status do ESP32${NC}"
	@$(PYTHON) scripts/device_status.py $(PORT)

info: ## Informa√ß√µes do chip ESP32
	@echo "${CYAN}‚ÑπÔ∏è  Informa√ß√µes do ESP32${NC}"
	esptool.py --chip $(CHIP) --port $(PORT) chip_id
	esptool.py --chip $(CHIP) --port $(PORT) flash_id

reset: ## Reset do ESP32 via serial
	@echo "${YELLOW}üîÑ Resetando ESP32...${NC}"
	@$(PYTHON) scripts/reset_device.py $(PORT)
	@echo "${GREEN}‚úÖ Reset enviado!${NC}"

erase: ## Apaga toda a flash do ESP32
	@echo "${RED}‚ö†Ô∏è  ATEN√á√ÉO: Isso apagar√° TODA a flash do ESP32!${NC}"
	@read -p "Tem certeza? (s/N): " confirm && [ "$$confirm" = "s" ] || exit 1
	esptool.py --chip $(CHIP) --port $(PORT) erase_flash
	@echo "${GREEN}‚úÖ Flash apagada!${NC}"

backup: ## Faz backup da flash atual
	@echo "${BLUE}üíæ Fazendo backup da flash...${NC}"
	@mkdir -p backups
	esptool.py --chip $(CHIP) --port $(PORT) read_flash 0x0 0x400000 backups/backup_$$(date +%Y%m%d_%H%M%S).bin
	@echo "${GREEN}‚úÖ Backup salvo em backups/${NC}"

restore: ## Restaura backup da flash
	@echo "${BLUE}üì• Restaurando backup...${NC}"
	@echo "Backups dispon√≠veis:"
	@ls -la backups/*.bin 2>/dev/null || echo "Nenhum backup encontrado"
	@read -p "Digite o nome do arquivo: " backup; \
	if [ -f "backups/$$backup" ]; then \
		esptool.py --chip $(CHIP) --port $(PORT) write_flash 0x0 backups/$$backup; \
		echo "${GREEN}‚úÖ Backup restaurado!${NC}"; \
	else \
		echo "${RED}‚ùå Arquivo n√£o encontrado${NC}"; \
	fi

# ============================================================================
# COMANDOS R√ÅPIDOS
# ============================================================================

f: flash ## Atalho para flash
m: monitor ## Atalho para monitor
b: build ## Atalho para build
c: clean ## Atalho para clean
fm: flash-monitor ## Atalho para flash-monitor

# ============================================================================
# PRODU√á√ÉO
# ============================================================================

production: ## Build otimizado para produ√ß√£o
	@echo "${BLUE}üè≠ Build de produ√ß√£o...${NC}"
	@$(PYTHON) scripts/production_build.py
	idf.py build
	@echo "${GREEN}‚úÖ Build de produ√ß√£o conclu√≠do!${NC}"

release: ## Cria release com versionamento
	@echo "${BLUE}üì¶ Criando release...${NC}"
	@$(PYTHON) scripts/create_release.py
	@echo "${GREEN}‚úÖ Release criada!${NC}"

# ============================================================================
# DOCUMENTA√á√ÉO
# ============================================================================

docs: ## Gera documenta√ß√£o do c√≥digo
	@echo "${BLUE}üìö Gerando documenta√ß√£o...${NC}"
	@$(PYTHON) scripts/generate_docs.py
	@echo "${GREEN}‚úÖ Documenta√ß√£o gerada em docs/html${NC}"

api-docs: ## Gera documenta√ß√£o da API
	@echo "${BLUE}üìñ Gerando documenta√ß√£o da API...${NC}"
	@$(PYTHON) scripts/generate_api_docs.py
	@echo "${GREEN}‚úÖ API docs em docs/api.md${NC}"

# ============================================================================
# DESENVOLVIMENTO AVAN√áADO
# ============================================================================

gdb: ## Debug com GDB
	@echo "${CYAN}üêõ Iniciando GDB debug...${NC}"
	idf.py gdb

openocd: ## Inicia OpenOCD para debug
	@echo "${CYAN}üîå Iniciando OpenOCD...${NC}"
	idf.py openocd

coredump: ## Analisa coredump
	@echo "${CYAN}üí• Analisando coredump...${NC}"
	idf.py coredump-info -p $(PORT)

# Comando padr√£o
.DEFAULT_GOAL := help