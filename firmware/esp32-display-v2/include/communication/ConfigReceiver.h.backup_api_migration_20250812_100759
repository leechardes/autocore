/**
 * @file ConfigReceiver.h
 * @brief Recebe configuração via MQTT do gateway
 */

#ifndef CONFIG_RECEIVER_H
#define CONFIG_RECEIVER_H

#include <Arduino.h>
#include <functional>
#include "core/MQTTClient.h"
#include "core/ConfigManager.h"

class ConfigReceiver {
private:
    MQTTClient* mqttClient;
    ConfigManager* configManager;
    
    String configTopic;
    String requestTopic;
    String responseTopic;
    String updateTopic;
    
    bool waitingForConfig;
    unsigned long requestTime;
    
    // Hot reload callback
    std::function<void()> onConfigUpdateCallback;
    
    // Static callbacks
    static ConfigReceiver* instance;
    static void onConfigReceived(const String& topic, const String& payload);
    static void onConfigUpdate(const String& topic, const String& payload);
    
public:
    ConfigReceiver(MQTTClient* mqtt, ConfigManager* config);
    ~ConfigReceiver();
    
    // Initialize and subscribe to topics
    void begin();
    
    // Request configuration from gateway
    void requestConfig();
    
    // Enable hot reload
    void enableHotReload(std::function<void()> callback);
    
    // Check if waiting for config
    bool isWaiting() const { return waitingForConfig; }
    unsigned long getWaitTime() const { return millis() - requestTime; }
    
private:
    void handleConfigMessage(const String& payload);
    void handleConfigUpdate(const String& payload);
};

#endif // CONFIG_RECEIVER_H