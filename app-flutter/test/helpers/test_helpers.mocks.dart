// Mocks generated by Mockito 5.4.5 from annotations
// in autocore_app/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:autocore_app/core/models/api/config_full_response.dart' as _i2;
import 'package:autocore_app/core/models/api/telemetry_data.dart' as _i13;
import 'package:autocore_app/domain/models/app_config.dart' as _i6;
import 'package:autocore_app/domain/models/mqtt_config.dart' as _i3;
import 'package:autocore_app/infrastructure/services/api_service.dart' as _i4;
import 'package:autocore_app/infrastructure/services/config_service.dart'
    as _i9;
import 'package:autocore_app/infrastructure/services/device_registration_service.dart'
    as _i10;
import 'package:autocore_app/infrastructure/services/mqtt_service.dart' as _i7;
import 'package:autocore_app/infrastructure/services/telemetry_service.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:mqtt_client/mqtt_client.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConfigFullResponse_0 extends _i1.SmartFake
    implements _i2.ConfigFullResponse {
  _FakeConfigFullResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMqttConfig_1 extends _i1.SmartFake implements _i3.MqttConfig {
  _FakeMqttConfig_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i4.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateBaseUrl(String? baseUrl) => super.noSuchMethod(
        Invocation.method(
          #updateBaseUrl,
          [baseUrl],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.ConfigFullResponse> getFullConfig(String? deviceUuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFullConfig,
          [deviceUuid],
        ),
        returnValue:
            _i5.Future<_i2.ConfigFullResponse>.value(_FakeConfigFullResponse_0(
          this,
          Invocation.method(
            #getFullConfig,
            [deviceUuid],
          ),
        )),
      ) as _i5.Future<_i2.ConfigFullResponse>);

  @override
  _i5.Future<bool> updateDevice(
    String? uuid,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDevice,
          [
            uuid,
            data,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> executeCommand(Map<String, dynamic>? command) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeCommand,
          [command],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, dynamic>> getSystemStatus() => (super.noSuchMethod(
        Invocation.method(
          #getSystemStatus,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<_i3.MqttConfig> getMqttConfig() => (super.noSuchMethod(
        Invocation.method(
          #getMqttConfig,
          [],
        ),
        returnValue: _i5.Future<_i3.MqttConfig>.value(_FakeMqttConfig_1(
          this,
          Invocation.method(
            #getMqttConfig,
            [],
          ),
        )),
      ) as _i5.Future<_i3.MqttConfig>);

  @override
  _i5.Future<bool> testConnection([String? url]) => (super.noSuchMethod(
        Invocation.method(
          #testConnection,
          [url],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  void updateConfig(_i6.AppConfig? config) => super.noSuchMethod(
        Invocation.method(
          #updateConfig,
          [config],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MqttService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMqttService extends _i1.Mock implements _i7.MqttService {
  MockMqttService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<bool> connect({
    String? host,
    int? port,
    String? username,
    String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #host: host,
            #port: port,
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> publish(
    String? topic,
    String? message, {
    _i8.MqttQos? qos,
    bool? retain = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publish,
          [
            topic,
            message,
          ],
          {
            #qos: qos,
            #retain: retain,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> publishJson(
    String? topic,
    Map<String, dynamic>? data, {
    _i8.MqttQos? qos,
    bool? retain = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishJson,
          [
            topic,
            data,
          ],
          {
            #qos: qos,
            #retain: retain,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Stream<String> subscribe(
    String? topic, {
    _i8.MqttQos? qos,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [topic],
          {#qos: qos},
        ),
        returnValue: _i5.Stream<String>.empty(),
      ) as _i5.Stream<String>);

  @override
  _i5.Future<void> unsubscribe(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [topic],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> refreshConfig() => (super.noSuchMethod(
        Invocation.method(
          #refreshConfig,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> testConnection() => (super.noSuchMethod(
        Invocation.method(
          #testConnection,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i9.ConfigService {
  MockConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ConfigFullResponse> getFullConfig({
    required String? deviceUuid,
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFullConfig,
          [],
          {
            #deviceUuid: deviceUuid,
            #forceRefresh: forceRefresh,
          },
        ),
        returnValue:
            _i5.Future<_i2.ConfigFullResponse>.value(_FakeConfigFullResponse_0(
          this,
          Invocation.method(
            #getFullConfig,
            [],
            {
              #deviceUuid: deviceUuid,
              #forceRefresh: forceRefresh,
            },
          ),
        )),
      ) as _i5.Future<_i2.ConfigFullResponse>);

  @override
  _i5.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.ConfigFullResponse> refreshConfig(
          {required String? deviceUuid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshConfig,
          [],
          {#deviceUuid: deviceUuid},
        ),
        returnValue:
            _i5.Future<_i2.ConfigFullResponse>.value(_FakeConfigFullResponse_0(
          this,
          Invocation.method(
            #refreshConfig,
            [],
            {#deviceUuid: deviceUuid},
          ),
        )),
      ) as _i5.Future<_i2.ConfigFullResponse>);

  @override
  Map<String, dynamic> getCacheInfo() => (super.noSuchMethod(
        Invocation.method(
          #getCacheInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i5.Future<void> preloadConfig({required String? deviceUuid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #preloadConfig,
          [],
          {#deviceUuid: deviceUuid},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void updateConfig(_i6.AppConfig? config) => super.noSuchMethod(
        Invocation.method(
          #updateConfig,
          [config],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DeviceRegistrationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceRegistrationService extends _i1.Mock
    implements _i10.DeviceRegistrationService {
  MockDeviceRegistrationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> checkAndRegister() => (super.noSuchMethod(
        Invocation.method(
          #checkAndRegister,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #checkAndRegister,
            [],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  String getDeviceUuid() => (super.noSuchMethod(
        Invocation.method(
          #getDeviceUuid,
          [],
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #getDeviceUuid,
            [],
          ),
        ),
      ) as String);

  @override
  _i5.Future<bool> isDeviceRegistered(String? uuid) => (super.noSuchMethod(
        Invocation.method(
          #isDeviceRegistered,
          [uuid],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> registerDevice([String? uuid]) => (super.noSuchMethod(
        Invocation.method(
          #registerDevice,
          [uuid],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isMarkedAsRegistered() => (super.noSuchMethod(
        Invocation.method(
          #isMarkedAsRegistered,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<String?> getCurrentDeviceUuid() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentDeviceUuid,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> clearRegistrationData() => (super.noSuchMethod(
        Invocation.method(
          #clearRegistrationData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> getRegistrationInfo() => (super.noSuchMethod(
        Invocation.method(
          #getRegistrationInfo,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}

/// A class which mocks [TelemetryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTelemetryService extends _i1.Mock implements _i12.TelemetryService {
  MockTelemetryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i13.TelemetryData> get telemetryStream => (super.noSuchMethod(
        Invocation.getter(#telemetryStream),
        returnValue: _i5.Stream<_i13.TelemetryData>.empty(),
      ) as _i5.Stream<_i13.TelemetryData>);

  @override
  _i5.Stream<Map<String, bool>> get relayStatesStream => (super.noSuchMethod(
        Invocation.getter(#relayStatesStream),
        returnValue: _i5.Stream<Map<String, bool>>.empty(),
      ) as _i5.Stream<Map<String, bool>>);

  @override
  _i5.Stream<Map<String, double>> get sensorValuesStream => (super.noSuchMethod(
        Invocation.getter(#sensorValuesStream),
        returnValue: _i5.Stream<Map<String, double>>.empty(),
      ) as _i5.Stream<Map<String, double>>);

  @override
  Map<String, bool> get currentRelayStates => (super.noSuchMethod(
        Invocation.getter(#currentRelayStates),
        returnValue: <String, bool>{},
      ) as Map<String, bool>);

  @override
  Map<String, double> get currentSensorValues => (super.noSuchMethod(
        Invocation.getter(#currentSensorValues),
        returnValue: <String, double>{},
      ) as Map<String, double>);

  @override
  bool get isReceivingTelemetry => (super.noSuchMethod(
        Invocation.getter(#isReceivingTelemetry),
        returnValue: false,
      ) as bool);

  @override
  bool get isSimulating => (super.noSuchMethod(
        Invocation.getter(#isSimulating),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> startTelemetry({
    required String? deviceUuid,
    int? telemetryInterval,
    bool? enableSimulation = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startTelemetry,
          [],
          {
            #deviceUuid: deviceUuid,
            #telemetryInterval: telemetryInterval,
            #enableSimulation: enableSimulation,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> stopTelemetry() => (super.noSuchMethod(
        Invocation.method(
          #stopTelemetry,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void updateSimulatedRelay(
    String? relayId,
    bool? state,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateSimulatedRelay,
          [
            relayId,
            state,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSimulatedSensor(
    String? sensorId,
    double? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateSimulatedSensor,
          [
            sensorId,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
