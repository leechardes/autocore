#!/bin/bash

# Setup e inicializa√ß√£o dos servi√ßos AutoCore no Raspberry Pi
# Este script deve ser executado NO Raspberry Pi

AUTOCORE_DIR="/opt/autocore"
USER="autocore"

# Configurar pip para Raspberry Pi
export PIP_DEFAULT_TIMEOUT=100
export PIP_RETRIES=5
export PIP_DISABLE_PIP_VERSION_CHECK=1
export PYTHONUNBUFFERED=1

# Vari√°veis de tempo
SETUP_START_TIME=$(date +%s)
declare -A PROCESS_TIMES
declare -A PROCESS_STATUS

# Fun√ß√£o para registrar tempo de processo
start_timer() {
    local process_name="$1"
    echo "  ‚è±Ô∏è  Iniciando: $process_name"
    PROCESS_TIMES["${process_name}_start"]=$(date +%s)
}

end_timer() {
    local process_name="$1"
    local status="${2:-success}"
    local start_time=${PROCESS_TIMES["${process_name}_start"]}
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    PROCESS_TIMES["${process_name}_duration"]=$duration
    PROCESS_STATUS["${process_name}"]=$status
    
    if [ "$status" = "success" ]; then
        echo "  ‚úÖ Conclu√≠do em ${duration}s"
    else
        echo "  ‚ö†Ô∏è Finalizado com avisos em ${duration}s"
    fi
}

echo "üîß AutoCore - Setup do Raspberry Pi"
echo "======================================"
echo "‚è∞ In√≠cio: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# Verificar se est√° rodando no Raspberry Pi
if [ ! -d "${AUTOCORE_DIR}" ]; then
    echo "‚ùå Erro: Diret√≥rio ${AUTOCORE_DIR} n√£o encontrado!"
    echo "Execute primeiro o deploy_to_raspberry.sh no seu computador"
    exit 1
fi

cd ${AUTOCORE_DIR}

# 1. Atualizar Node.js se necess√°rio
echo "üîÑ Verificando vers√£o do Node.js..."
start_timer "nodejs_check"
NODE_VERSION=$(node -v 2>/dev/null | sed 's/v//' | cut -d. -f1)
if [ -z "$NODE_VERSION" ] || [ "$NODE_VERSION" -lt 16 ]; then
    echo "  Node.js desatualizado ou n√£o instalado. Instalando v18..."
    
    # Remover vers√£o antiga se existir
    sudo apt-get remove -y nodejs npm
    
    # Instalar Node.js 18.x via NodeSource
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
    
    echo "  Node.js atualizado para: $(node -v)"
    echo "  NPM: $(npm -v)"
else
    echo "  Node.js v$NODE_VERSION j√° est√° instalado"
fi

# 2. Instalar Mosquitto MQTT Broker e depend√™ncias
echo "üì¶ Instalando depend√™ncias do sistema..."
sudo apt-get update
sudo apt-get install -y python3-pip python3-venv python3-dev build-essential

# Instalar Mosquitto se n√£o estiver instalado
echo "ü¶ü Verificando Mosquitto MQTT Broker..."
if ! command -v mosquitto &> /dev/null; then
    echo "üì• Instalando Mosquitto..."
    sudo apt-get install -y mosquitto mosquitto-clients
else
    echo "‚úÖ Mosquitto j√° instalado"
fi

# Configurar Mosquitto
echo "‚öôÔ∏è Configurando Mosquitto..."
sudo tee /etc/mosquitto/conf.d/autocore.conf > /dev/null << 'EOF'
listener 1883
allow_anonymous false
password_file /etc/mosquitto/passwd
EOF

# Criar usu√°rio MQTT
# Gerar senha aleat√≥ria para MQTT se n√£o existir
if [ -f "${AUTOCORE_DIR}/deploy/.credentials" ] && grep -q "MQTT_PASS=" "${AUTOCORE_DIR}/deploy/.credentials"; then
    source ${AUTOCORE_DIR}/deploy/.credentials
    MQTT_PASSWORD="${MQTT_PASS}"
    echo "  üìã Usando senha MQTT existente das credenciais"
else
    # Gerar nova senha aleat√≥ria
    MQTT_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
    echo "  üîê Gerando nova senha MQTT aleat√≥ria"
    
    # Salvar nas credenciais
    if [ -f "${AUTOCORE_DIR}/deploy/.credentials" ]; then
        # Adicionar ou atualizar senha
        grep -v "MQTT_PASS=" "${AUTOCORE_DIR}/deploy/.credentials" > /tmp/creds.tmp
        mv /tmp/creds.tmp "${AUTOCORE_DIR}/deploy/.credentials"
    fi
    echo "MQTT_PASS=${MQTT_PASSWORD}" >> "${AUTOCORE_DIR}/deploy/.credentials"
    chmod 600 "${AUTOCORE_DIR}/deploy/.credentials"
fi

# Configurar senha no Mosquitto
echo "  üîß Configurando senha no Mosquitto..."
echo "autocore:${MQTT_PASSWORD}" > /tmp/mqtt_passwords.txt
sudo mosquitto_passwd -U /tmp/mqtt_passwords.txt
sudo mv /tmp/mqtt_passwords.txt /etc/mosquitto/passwd
sudo chown mosquitto:mosquitto /etc/mosquitto/passwd
sudo chmod 600 /etc/mosquitto/passwd

# Reiniciar Mosquitto
sudo systemctl restart mosquitto
sudo systemctl enable mosquitto

# Configurar .env para backend e gateway com a senha MQTT
echo "  üìù Configurando arquivos .env..."

# Obter IP do Raspberry Pi para CORS e acesso externo
RASPBERRY_IP=$(hostname -I | awk '{print $1}')

# Configurar .env do backend
if [ -d "${AUTOCORE_DIR}/config-app/backend" ]; then
    cat > ${AUTOCORE_DIR}/config-app/backend/.env << EOF
# Config App Backend Configuration
# Server
CONFIG_APP_PORT=8081
CONFIG_APP_HOST=0.0.0.0
ENV=production

# MQTT (conex√£o local - backend roda no mesmo servidor)
MQTT_BROKER=localhost
MQTT_PORT=1883
MQTT_USERNAME=autocore
MQTT_PASSWORD=${MQTT_PASSWORD}
MQTT_HOST=localhost

# Database
DATABASE_PATH=../../database/autocore.db

# Security
SECRET_KEY=$(openssl rand -hex 32)
JWT_SECRET_KEY=$(openssl rand -hex 32)
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRES=3600

# Logging
LOG_LEVEL=INFO
LOG_FILE=../../logs/config-app.log

# CORS
CORS_ORIGINS=http://localhost:3000,http://localhost:5000,http://${RASPBERRY_IP}:3000
EOF
    chmod 600 ${AUTOCORE_DIR}/config-app/backend/.env
    echo "    ‚úÖ Backend .env configurado"
fi

# Configurar .env do gateway
if [ -d "${AUTOCORE_DIR}/gateway" ]; then
    cat > ${AUTOCORE_DIR}/gateway/.env << EOF
# AutoCore Gateway Configuration
# MQTT (conex√£o local - gateway roda no mesmo servidor)
MQTT_BROKER=localhost
MQTT_PORT=1883
MQTT_USERNAME=autocore
MQTT_PASSWORD=${MQTT_PASSWORD}
MQTT_HOST=localhost

# Gateway
GATEWAY_PORT=5001
GATEWAY_HOST=0.0.0.0

# Security
SECRET_KEY=$(openssl rand -hex 32)

# Database
DATABASE_PATH=../database/autocore.db

# Logging
LOG_LEVEL=INFO
LOG_FILE=../logs/gateway.log
EOF
    chmod 600 ${AUTOCORE_DIR}/gateway/.env
    echo "    ‚úÖ Gateway .env configurado"
fi

# Configurar .env do frontend
if [ -d "${AUTOCORE_DIR}/config-app/frontend" ]; then
    cat > ${AUTOCORE_DIR}/config-app/frontend/.env << EOF
# Config App Frontend Configuration

# Frontend port
VITE_PORT=3000

# Backend API - Usar IP din√¢mico (o frontend detecta automaticamente)
# Quando acessar de outro PC na rede, ele usar√° o IP correto
VITE_API_URL=
VITE_API_PORT=8081
VITE_API_BASE_URL=
VITE_WS_URL=

# Environment
VITE_ENV=production
EOF
    chmod 600 ${AUTOCORE_DIR}/config-app/frontend/.env
    echo "    ‚úÖ Frontend .env configurado (detec√ß√£o autom√°tica de IP)"
fi

# Verificar conex√£o MQTT
echo "  üîç Verificando conex√£o MQTT..."
if timeout 2 mosquitto_sub -h localhost -u autocore -P "${MQTT_PASSWORD}" -t test -C 1 >/dev/null 2>&1; then
    echo "    ‚úÖ MQTT funcionando com autentica√ß√£o"
else
    echo "    ‚ö†Ô∏è MQTT n√£o est√° respondendo corretamente"
fi

# 2. Setup Database
echo "üíæ Configurando Database..."
cd ${AUTOCORE_DIR}/database

# Criar venv se n√£o existir
if [ ! -d ".venv" ]; then
    python3 -m venv .venv
fi

source .venv/bin/activate

# Atualizar pip primeiro
pip install --upgrade pip wheel setuptools

# Instalar requirements com retry e timeout maior
echo "  Instalando depend√™ncias (pode demorar)..."
pip install --no-cache-dir --timeout 120 --retries 5 -r requirements.txt || {
    echo "  Tentando instalar uma por uma..."
    while IFS= read -r package; do
        [[ "$package" =~ ^#.*$ || -z "$package" ]] && continue
        echo "    - $package"
        pip install --no-cache-dir --timeout 120 "$package" || echo "    ‚ö†Ô∏è Falhou: $package"
    done < requirements.txt
}

# Inicializar database
if [ -f "src/cli/init_database.py" ]; then
    python src/cli/init_database.py
else
    echo "  ‚ö†Ô∏è Script init_database.py n√£o encontrado"
fi

deactivate

# 3. Setup Gateway
echo "üåê Configurando Gateway..."
cd ${AUTOCORE_DIR}/gateway

if [ ! -d ".venv" ]; then
    python3 -m venv .venv
fi

source .venv/bin/activate
pip install --upgrade pip wheel setuptools

echo "  Instalando depend√™ncias (pode demorar)..."
pip install --no-cache-dir --timeout 120 --retries 5 -r requirements.txt || {
    echo "  Tentando instalar uma por uma..."
    while IFS= read -r package; do
        [[ "$package" =~ ^#.*$ || -z "$package" ]] && continue
        echo "    - $package"
        pip install --no-cache-dir --timeout 120 "$package" || echo "    ‚ö†Ô∏è Falhou: $package"
    done < requirements.txt
}

deactivate

# 4. Setup Config App Backend
echo "‚öôÔ∏è Configurando Config App Backend..."
cd ${AUTOCORE_DIR}/config-app/backend

if [ ! -d ".venv" ]; then
    python3 -m venv .venv
fi

source .venv/bin/activate
pip install --upgrade pip wheel setuptools

echo "  Instalando depend√™ncias (pode demorar)..."
pip install --no-cache-dir --timeout 120 --retries 5 -r requirements.txt || {
    echo "  Tentando instalar uma por uma..."
    while IFS= read -r package; do
        [[ "$package" =~ ^#.*$ || -z "$package" ]] && continue
        echo "    - $package"
        pip install --no-cache-dir --timeout 120 "$package" || echo "    ‚ö†Ô∏è Falhou: $package"
    done < requirements.txt
}

deactivate

# 5. Setup Config App Frontend
echo "üé® Configurando Config App Frontend..."
cd ${AUTOCORE_DIR}/config-app/frontend

# Limpar cache do npm se existir
npm cache clean --force 2>/dev/null || true

# Instalar com timeout maior
npm install --loglevel=error --prefer-offline --no-audit --progress=false || {
    echo "  ‚ö†Ô∏è Instala√ß√£o do frontend pode ter falhado parcialmente"
}

# 6. Copiar servi√ßos systemd
echo "üîß Instalando servi√ßos systemd..."

# Verificar se os arquivos existem
if [ ! -d "${AUTOCORE_DIR}/deploy/systemd" ] || [ -z "$(ls -A ${AUTOCORE_DIR}/deploy/systemd/*.service 2>/dev/null)" ]; then
    echo "‚ö†Ô∏è Arquivos systemd n√£o encontrados em ${AUTOCORE_DIR}/deploy/systemd/"
    echo "Pulando instala√ß√£o de servi√ßos systemd..."
    return 1
fi

# Copiar arquivos de servi√ßo
sudo cp ${AUTOCORE_DIR}/deploy/systemd/*.service /etc/systemd/system/

# Ajustar permiss√µes
sudo chmod 644 /etc/systemd/system/autocore-*.service

# Recarregar systemd
sudo systemctl daemon-reload

# 7. Configurar WiFi Access Point (opcional)
echo ""
echo "üì° Configurar Access Point WiFi?"
echo "   Permite conectar dispositivos diretamente no AutoCore"
echo "   SSID ser√°: AutoCore_XXXXXXXXXXXX (baseado no MAC)"
read -p "   Configurar AP? (s/N): " SETUP_AP

if [ "$SETUP_AP" = "s" ] || [ "$SETUP_AP" = "S" ]; then
    if [ -f "${AUTOCORE_DIR}/deploy/setup_wifi_ap.sh" ]; then
        echo "  Configurando Access Point..."
        sudo bash ${AUTOCORE_DIR}/deploy/setup_wifi_ap.sh
    else
        echo "  ‚ö†Ô∏è Script setup_wifi_ap.sh n√£o encontrado"
    fi
fi

# 7.2 Configurar Bluetooth
echo ""
echo "üì± Configurar Bluetooth para comunica√ß√£o com app?"
echo "   Permite controlar o AutoCore sem perder internet no celular"
read -p "   Configurar Bluetooth? (S/n): " SETUP_BT

if [ "$SETUP_BT" != "n" ] && [ "$SETUP_BT" != "N" ]; then
    if [ -f "${AUTOCORE_DIR}/deploy/setup_bluetooth.sh" ]; then
        echo "  Configurando Bluetooth..."
        start_timer "bluetooth_setup"
        sudo bash ${AUTOCORE_DIR}/deploy/setup_bluetooth.sh
        end_timer "bluetooth_setup"
    else
        echo "  ‚ö†Ô∏è Script setup_bluetooth.sh n√£o encontrado"
    fi
fi

# 7.3 Configurar medi√ß√£o de tempo de boot
echo ""
echo "‚è±Ô∏è Configurar medi√ß√£o de tempo de boot?"
echo "   Registra quanto tempo o Pi leva para iniciar completamente"
read -p "   Configurar timer de boot? (S/n): " SETUP_BOOT_TIMER

if [ "$SETUP_BOOT_TIMER" != "n" ] && [ "$SETUP_BOOT_TIMER" != "N" ]; then
    if [ -f "${AUTOCORE_DIR}/deploy/setup_boot_timer.sh" ]; then
        echo "  Configurando timer de boot..."
        start_timer "boot_timer_setup"
        sudo bash ${AUTOCORE_DIR}/deploy/setup_boot_timer.sh
        end_timer "boot_timer_setup"
    else
        echo "  ‚ö†Ô∏è Script setup_boot_timer.sh n√£o encontrado"
    fi
fi

# 8. Iniciar servi√ßos
echo "üöÄ Iniciando servi√ßos..."

# Habilitar servi√ßos
sudo systemctl enable autocore-gateway autocore-config-app autocore-config-frontend 2>/dev/null || true

# Iniciar servi√ßos um por um com verifica√ß√£o
for service in autocore-gateway autocore-config-app autocore-config-frontend; do
    echo "  Iniciando $service..."
    sudo systemctl start $service
    sleep 2
    if sudo systemctl is-active --quiet $service; then
        echo "    ‚úÖ $service rodando"
    else
        echo "    ‚ö†Ô∏è $service falhou ao iniciar"
        sudo systemctl status $service --no-pager | head -n 5
    fi
done

# 9. Verificar status e gerar resumo
SETUP_END_TIME=$(date +%s)
TOTAL_DURATION=$((SETUP_END_TIME - SETUP_START_TIME))

echo ""
echo "‚úÖ Setup conclu√≠do!"
echo ""
echo "üìä Status dos servi√ßos:"
echo "========================"

for service in autocore-gateway autocore-config-app autocore-config-frontend mosquitto; do
    if sudo systemctl is-active --quiet $service; then
        echo "  ‚úÖ $service: ativo"
    else
        echo "  ‚ùå $service: inativo"
    fi
done

echo ""
echo "üåê Acesse o sistema em:"
echo "  - Config App: http://${HOSTNAME}.local:3000"
echo "  - Backend API: http://${HOSTNAME}.local:5000"
echo "  - MQTT Broker: ${HOSTNAME}.local:1883"
echo ""
echo "üìù Comandos √∫teis:"
echo "  - Ver logs: sudo journalctl -u autocore-gateway -f"
echo "  - Reiniciar: sudo systemctl restart autocore-gateway"
echo "  - Parar: sudo systemctl stop autocore-gateway"
echo ""

# Resumo de tempos de execu√ß√£o
echo ""
echo "‚è±Ô∏è TEMPOS DE EXECU√á√ÉO"
echo "========================"

# Converter dura√ß√£o total para formato leg√≠vel
TOTAL_MINUTES=$((TOTAL_DURATION / 60))
TOTAL_SECONDS=$((TOTAL_DURATION % 60))

echo "Tempo total: ${TOTAL_MINUTES}m ${TOTAL_SECONDS}s"
echo ""

echo "Detalhamento por processo:"
for process in "${!PROCESS_TIMES[@]}"; do
    if [[ $process == *"_duration" ]]; then
        process_name=${process%_duration}
        duration=${PROCESS_TIMES[$process]}
        status=${PROCESS_STATUS[$process_name]:-"success"}
        
        # Formatar tempo
        if [ $duration -ge 60 ]; then
            minutes=$((duration / 60))
            seconds=$((duration % 60))
            time_str="${minutes}m ${seconds}s"
        else
            time_str="${duration}s"
        fi
        
        # √çcone baseado no status
        if [ "$status" = "success" ]; then
            icon="‚úÖ"
        else
            icon="‚ö†Ô∏è"
        fi
        
        printf "  %s %-30s %10s\n" "$icon" "$process_name:" "$time_str"
    fi
done | sort

echo ""
echo "========================"
echo "‚è∞ Finalizado: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# Gerar relat√≥rio de instala√ß√£o
REPORT_FILE="${AUTOCORE_DIR}/installation_report_$(date +%Y%m%d_%H%M%S).log"
echo "üîç Gerando relat√≥rio de instala√ß√£o..."

{
    echo "=========================================="
    echo "     RELAT√ìRIO DE INSTALA√á√ÉO AUTOCORE"
    echo "=========================================="
    echo ""
    echo "üìÖ Data/Hora: $(date)"
    echo "üñ•Ô∏è Hostname: $(hostname)"
    echo "üìç IP: $(hostname -I | awk '{print $1}')"
    echo "üë§ Usu√°rio: $USER"
    echo "üìÇ Diret√≥rio: $AUTOCORE_DIR"
    echo ""
    echo "=========================================="
    echo "     VERS√ïES DOS COMPONENTES"
    echo "=========================================="
    echo ""
    echo "üêç Python: $(python3 --version)"
    echo "üì¶ Pip: $(pip3 --version | cut -d' ' -f2)"
    echo "üü¢ Node.js: $(node -v)"
    echo "üì¶ NPM: $(npm -v)"
    echo "ü¶ü Mosquitto: $(mosquitto -h | head -1)"
    echo ""
    echo "=========================================="
    echo "     ESPA√áO EM DISCO"
    echo "=========================================="
    echo ""
    df -h / | tail -1 | awk '{print "üìä Usado: "$3" de "$2" ("$5" ocupado)"}'
    echo ""
    echo "=========================================="
    echo "     TAMANHO DOS DIRET√ìRIOS"
    echo "=========================================="
    echo ""
    du -sh ${AUTOCORE_DIR}/database 2>/dev/null | awk '{print "üíæ Database: "$1}'
    du -sh ${AUTOCORE_DIR}/gateway 2>/dev/null | awk '{print "üåê Gateway: "$1}'
    du -sh ${AUTOCORE_DIR}/config-app 2>/dev/null | awk '{print "‚öôÔ∏è Config-app: "$1}'
    echo ""
    echo "=========================================="
    echo "     STATUS DOS SERVI√áOS"
    echo "=========================================="
    echo ""
    for service in autocore-gateway autocore-config-app autocore-config-frontend mosquitto; do
        if sudo systemctl is-active --quiet $service; then
            status="‚úÖ ATIVO"
            uptime=$(sudo systemctl show $service --property=ActiveEnterTimestamp --value 2>/dev/null)
            echo "  $service: $status (desde $uptime)"
        else
            status="‚ùå INATIVO"
            echo "  $service: $status"
            # Pegar √∫ltimas linhas de erro se houver
            echo "    √öltimos logs:"
            sudo journalctl -u $service -n 3 --no-pager 2>/dev/null | sed 's/^/      /'
        fi
    done
    echo ""
    echo "=========================================="
    echo "     PACOTES PYTHON INSTALADOS"
    echo "=========================================="
    echo ""
    echo "üì¶ Gateway:"
    if [ -f "${AUTOCORE_DIR}/gateway/.venv/bin/pip" ]; then
        ${AUTOCORE_DIR}/gateway/.venv/bin/pip list --format=freeze | head -10
        echo "  ... ($(${AUTOCORE_DIR}/gateway/.venv/bin/pip list --format=freeze | wc -l) pacotes no total)"
    fi
    echo ""
    echo "üì¶ Config-app Backend:"
    if [ -f "${AUTOCORE_DIR}/config-app/backend/.venv/bin/pip" ]; then
        ${AUTOCORE_DIR}/config-app/backend/.venv/bin/pip list --format=freeze | head -10
        echo "  ... ($(${AUTOCORE_DIR}/config-app/backend/.venv/bin/pip list --format=freeze | wc -l) pacotes no total)"
    fi
    echo ""
    echo "üì¶ Database:"
    if [ -f "${AUTOCORE_DIR}/database/.venv/bin/pip" ]; then
        ${AUTOCORE_DIR}/database/.venv/bin/pip list --format=freeze | head -10
        echo "  ... ($(${AUTOCORE_DIR}/database/.venv/bin/pip list --format=freeze | wc -l) pacotes no total)"
    fi
    echo ""
    echo "=========================================="
    echo "     VERIFICA√á√ïES DE CONECTIVIDADE"
    echo "=========================================="
    echo ""
    # Testar MQTT
    timeout 2 mosquitto_sub -h localhost -u autocore -P autocore123 -t test -C 1 2>/dev/null && echo "ü¶ü MQTT: ‚úÖ Conectado" || echo "ü¶ü MQTT: ‚ùå Falha na conex√£o"
    
    # Testar APIs
    response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 2 http://localhost:8081/health 2>/dev/null || echo "000")
    if [ "$response" = "200" ]; then
        echo "üîå Backend API (porta 8081): ‚úÖ OK"
    else
        echo "üîå Backend API (porta 8081): ‚ùå N√£o respondendo (c√≥digo: $response)"
    fi
    
    response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 2 http://localhost:8080 2>/dev/null || echo "000")
    if [ "$response" = "200" ] || [ "$response" = "304" ]; then
        echo "üì± Frontend (porta 8080): ‚úÖ OK"
    else
        echo "üì± Frontend (porta 8080): ‚ùå N√£o respondendo (c√≥digo: $response)"
    fi
    
    echo ""
    echo "=========================================="
    echo "     CONFIGURA√á√ÉO DE REDE"
    echo "=========================================="
    echo ""
    echo "üåê Interfaces de rede:"
    ip -br addr show | grep UP
    echo ""
    echo "üîó Portas abertas:"
    sudo netstat -tlnp 2>/dev/null | grep -E ':(1883|8080|8081)' | awk '{print "  "$4" - "$7}' || echo "  Erro ao listar portas"
    echo ""
    echo "=========================================="
    echo "     LOGS DE ERROS RECENTES"
    echo "=========================================="
    echo ""
    echo "‚ö†Ô∏è √öltimos erros do sistema (se houver):"
    sudo journalctl -p err -n 10 --no-pager 2>/dev/null | head -20 2>/dev/null || echo "Nenhum erro encontrado"
    echo ""
    echo "=========================================="
    echo "     INFORMA√á√ïES DO SISTEMA"
    echo "=========================================="
    echo ""
    echo "üñ•Ô∏è Sistema: $(uname -a)"
    echo "‚è∞ Uptime: $(uptime -p)"
    echo "üß† Mem√≥ria: $(free -h | grep Mem | awk '{print "Total: "$2", Usado: "$3", Livre: "$4}')"
    echo "üå°Ô∏è Temperatura: $(vcgencmd measure_temp 2>/dev/null || echo 'N/A')"
    echo ""
    echo "=========================================="
    echo "     FIM DO RELAT√ìRIO"
    echo "=========================================="
    echo ""
    echo "üìù Relat√≥rio salvo em: $REPORT_FILE"
    echo "üìÖ Gerado em: $(date)"
} | tee "$REPORT_FILE"

echo ""
echo "üìä Relat√≥rio de instala√ß√£o salvo em:"
echo "   $REPORT_FILE"
echo ""

# Criar link para o √∫ltimo relat√≥rio
ln -sf "$REPORT_FILE" "${AUTOCORE_DIR}/last_installation_report.log"

# Criar flag de instala√ß√£o completa
touch ${AUTOCORE_DIR}/.installed

# An√°lise final e resumo
echo ""
echo "=========================================="
echo "           RESUMO EXECUTIVO"
echo "=========================================="
echo ""

# Contar servi√ßos ativos
SERVICES_OK=0
SERVICES_FAIL=0
for service in autocore-gateway autocore-config-app autocore-config-frontend mosquitto; do
    if sudo systemctl is-active --quiet $service; then
        ((SERVICES_OK++))
    else
        ((SERVICES_FAIL++))
    fi
done

# Verificar instala√ß√£o
if [ $SERVICES_FAIL -eq 0 ]; then
    echo "‚úÖ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo ""
    echo "üìä Todos os $SERVICES_OK servi√ßos est√£o rodando"
    echo "üåê Sistema acess√≠vel em: http://$(hostname -I | awk '{print $1}'):3000"
    echo ""
    echo "üéâ AutoCore est√° pronto para uso!"
else
    echo "‚ö†Ô∏è INSTALA√á√ÉO CONCLU√çDA COM AVISOS"
    echo ""
    echo "üìä $SERVICES_OK servi√ßos rodando, $SERVICES_FAIL com problemas"
    echo ""
    echo "‚öôÔ∏è Execute os seguintes comandos para diagnosticar:"
    for service in autocore-gateway autocore-config-app autocore-config-frontend; do
        if ! sudo systemctl is-active --quiet $service; then
            echo "  sudo journalctl -u $service -n 50"
        fi
    done
    echo ""
    echo "üìù Consulte: $REPORT_FILE"
fi

echo ""
echo "=========================================="