#!/bin/bash
# Script para inicializar o AutoCore Gateway

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ Iniciando AutoCore Gateway...${NC}"

# Verificar se est√° no ambiente virtual
if [[ "$VIRTUAL_ENV" != "" ]]; then
    echo -e "${GREEN}‚úÖ Ambiente virtual ativo: $VIRTUAL_ENV${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Nenhum ambiente virtual detectado${NC}"
    echo -e "${YELLOW}   Recomendado: source .venv/bin/activate${NC}"
fi

# Verificar depend√™ncias
echo -e "${GREEN}üì¶ Verificando depend√™ncias...${NC}"
python3 -c "import paho.mqtt.client; print('‚úÖ paho-mqtt')" 2>/dev/null || echo -e "${RED}‚ùå paho-mqtt n√£o encontrado${NC}"
python3 -c "import asyncio; print('‚úÖ asyncio')" 2>/dev/null || echo -e "${RED}‚ùå asyncio n√£o encontrado${NC}"
python3 -c "import psutil; print('‚úÖ psutil')" 2>/dev/null || echo -e "${RED}‚ùå psutil n√£o encontrado${NC}"

# Verificar database
if [ -f "../database/autocore.db" ]; then
    echo -e "${GREEN}‚úÖ Database encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Database n√£o encontrado${NC}"
    echo -e "${YELLOW}   Execute: cd ../database && python src/cli/manage.py init${NC}"
fi

# Verificar arquivo de configura√ß√£o
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ Arquivo .env encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Arquivo .env n√£o encontrado${NC}"
    echo -e "${YELLOW}   Criando .env baseado no .env.example...${NC}"
    cp .env.example .env
    echo -e "${GREEN}‚úÖ Arquivo .env criado${NC}"
fi

echo -e "${GREEN}üöÄ Iniciando Gateway...${NC}"
cd "$(dirname "$0")/.."  # Voltar para raiz do gateway
python3 -m src.main