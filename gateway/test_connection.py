#!/usr/bin/env python3
"""
Script de teste de conex√£o MQTT do Gateway
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv
import paho.mqtt.client as mqtt
import time

# Carregar .env
env_path = Path(__file__).parent / '.env'
load_dotenv(env_path)

def on_connect(client, userdata, flags, rc):
    """Callback de conex√£o"""
    if rc == 0:
        print("‚úÖ Conectado ao MQTT com sucesso!")
        print(f"   Broker: {os.getenv('MQTT_BROKER')}:{os.getenv('MQTT_PORT')}")
        print(f"   Client ID: {os.getenv('MQTT_CLIENT_ID')}")
        client.disconnect()
    else:
        error_codes = {
            1: "Protocolo incorreto",
            2: "ID de cliente inv√°lido",
            3: "Servidor indispon√≠vel",
            4: "Credenciais inv√°lidas",
            5: "N√£o autorizado",
            7: "Conex√£o recusada - n√£o autorizado"
        }
        error_msg = error_codes.get(rc, f"Erro desconhecido ({rc})")
        print(f"‚ùå Falha na conex√£o: {error_msg}")
        
def on_disconnect(client, userdata, rc):
    """Callback de desconex√£o"""
    if rc == 0:
        print("üì¥ Desconectado normalmente")
    else:
        print(f"‚ö†Ô∏è Desconex√£o inesperada: {rc}")

def test_mqtt_connection():
    """Testa conex√£o MQTT com as configura√ß√µes do .env"""
    print("üîß Testando conex√£o MQTT do Gateway...")
    print("=" * 50)
    
    # Ler configura√ß√µes
    broker = os.getenv('MQTT_BROKER', 'localhost')
    port = int(os.getenv('MQTT_PORT', '1883'))
    username = os.getenv('MQTT_USERNAME')
    password = os.getenv('MQTT_PASSWORD')
    client_id = os.getenv('MQTT_CLIENT_ID', 'gateway-test')
    
    print(f"üìã Configura√ß√µes:")
    print(f"   Broker: {broker}:{port}")
    print(f"   Client ID: {client_id}")
    print(f"   Autentica√ß√£o: {'Sim' if username else 'N√£o'}")
    if username:
        print(f"   Usu√°rio: {username}")
    print()
    
    # Criar cliente MQTT
    client = mqtt.Client(client_id=client_id)
    
    # Configurar callbacks
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    
    # Configurar autentica√ß√£o se necess√°rio
    if username and password:
        client.username_pw_set(username, password)
        print("üîê Usando autentica√ß√£o")
    else:
        print("üîì Sem autentica√ß√£o")
    
    print("üîÑ Conectando...")
    print()
    
    try:
        # Tentar conectar
        client.connect(broker, port, keepalive=60)
        
        # Loop para processar callbacks
        client.loop_start()
        time.sleep(2)  # Aguardar conex√£o
        client.loop_stop()
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar: {e}")
        return False
    
    return True

def check_database():
    """Verifica se o database est√° acess√≠vel"""
    print("\nüóÑÔ∏è Verificando Database...")
    print("=" * 50)
    
    db_path = os.getenv('DATABASE_PATH', '../database/autocore.db')
    db_file = Path(db_path)
    
    if db_file.exists():
        print(f"‚úÖ Database encontrado: {db_file.absolute()}")
        print(f"   Tamanho: {db_file.stat().st_size / 1024:.2f} KB")
    else:
        print(f"‚ùå Database n√£o encontrado: {db_path}")
        print(f"   Path absoluto: {db_file.absolute()}")
    
def check_environment():
    """Verifica todas as vari√°veis de ambiente"""
    print("\nüîç Vari√°veis de Ambiente:")
    print("=" * 50)
    
    important_vars = [
        'MQTT_BROKER',
        'MQTT_PORT',
        'MQTT_USERNAME',
        'MQTT_PASSWORD',
        'MQTT_CLIENT_ID',
        'DATABASE_PATH',
        'LOG_LEVEL',
        'SECRET_KEY',
        'ENV'
    ]
    
    for var in important_vars:
        value = os.getenv(var)
        if value:
            if var == 'SECRET_KEY':
                print(f"‚úÖ {var}: ***{value[-8:]}")  # Mostrar apenas √∫ltimos 8 chars
            elif var == 'MQTT_PASSWORD':
                print(f"‚úÖ {var}: {'*' * len(value)}")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ö†Ô∏è {var}: N√£o definido")

if __name__ == "__main__":
    print("üöÄ AutoCore Gateway - Teste de Configura√ß√£o")
    print("=" * 50)
    
    # Verificar ambiente
    check_environment()
    
    # Verificar database
    check_database()
    
    # Testar MQTT
    print()
    success = test_mqtt_connection()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ Gateway pronto para execu√ß√£o!")
    else:
        print("‚ùå Corrija os problemas acima antes de executar o Gateway")