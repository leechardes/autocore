#!/usr/bin/env python3
"""
Script de teste para debugar o simulador de rel√©s
"""
import asyncio
import sys
import os
from pathlib import Path

# Adicionar paths necess√°rios
sys.path.append(str(Path(__file__).parent.parent.parent / "database"))

# Configurar vari√°veis de ambiente
os.environ.setdefault("MQTT_BROKER", "localhost")
os.environ.setdefault("MQTT_PORT", "1883")
os.environ.setdefault("MQTT_USERNAME", "autocore")
os.environ.setdefault("MQTT_PASSWORD", "kskLrz8uqg9K4WY8BsIUQYV6Cu07UDqr")

import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def test_simulator():
    """Testa cria√ß√£o do simulador"""
    print("\nüß™ TESTE DO SIMULADOR DE REL√âS")
    print("=" * 50)
    
    try:
        # 1. Verificar ambiente
        print("\n1Ô∏è‚É£ Verificando ambiente...")
        print(f"   MQTT_BROKER: {os.getenv('MQTT_BROKER')}")
        print(f"   MQTT_PORT: {os.getenv('MQTT_PORT')}")
        print(f"   MQTT_USERNAME: {os.getenv('MQTT_USERNAME')}")
        print(f"   MQTT_PASSWORD: {'*' * 10 if os.getenv('MQTT_PASSWORD') else 'N√ÉO DEFINIDO'}")
        
        # 2. Importar simulador
        print("\n2Ô∏è‚É£ Importando simulador...")
        from simulators.relay_simulator import RelayBoardSimulator, RelaySimulatorManager
        print("   ‚úÖ Import OK")
        
        # 3. Verificar banco de dados
        print("\n3Ô∏è‚É£ Verificando banco de dados...")
        from shared.repositories import devices, relays
        
        with devices as repo:
            all_devices = repo.get_all()
            esp32_devices = [d for d in all_devices if d.type == "esp32_relay"]
            print(f"   Dispositivos ESP32 relay: {len(esp32_devices)}")
            for dev in esp32_devices:
                print(f"      ‚Ä¢ {dev.name} (UUID: {dev.uuid})")
        
        with relays as repo:
            boards = repo.get_boards()
            print(f"   Placas de rel√©: {len(boards)}")
            for board in boards:
                print(f"      ‚Ä¢ Board ID: {board.id}, Device ID: {board.device_id}, Canais: {board.total_channels}")
        
        if not boards:
            print("   ‚ö†Ô∏è Nenhuma placa cadastrada! Cadastre uma placa primeiro.")
            return False
        
        # 4. Testar conex√£o MQTT direta
        print("\n4Ô∏è‚É£ Testando conex√£o MQTT...")
        import paho.mqtt.client as mqtt
        
        connected = False
        def on_connect(client, userdata, flags, rc):
            nonlocal connected
            if rc == 0:
                print("   ‚úÖ Conectado ao MQTT")
                connected = True
            else:
                print(f"   ‚ùå Falha na conex√£o: c√≥digo {rc}")
                if rc == 5:
                    print("      Erro 5: N√£o autorizado - verifique usu√°rio/senha")
        
        client = mqtt.Client(client_id="test_simulator")
        client.on_connect = on_connect
        
        # Configurar autentica√ß√£o
        mqtt_user = os.getenv("MQTT_USERNAME")
        mqtt_pass = os.getenv("MQTT_PASSWORD")
        if mqtt_user and mqtt_pass:
            client.username_pw_set(mqtt_user, mqtt_pass)
            print(f"   üîê Usando autentica√ß√£o: {mqtt_user}")
        else:
            print("   ‚ö†Ô∏è Sem autentica√ß√£o configurada")
        
        try:
            client.connect(os.getenv("MQTT_BROKER", "localhost"), 
                          int(os.getenv("MQTT_PORT", "1883")), 60)
            client.loop_start()
            await asyncio.sleep(2)
            client.loop_stop()
            client.disconnect()
        except Exception as e:
            print(f"   ‚ùå Erro conectando: {e}")
            connected = False
        
        if not connected:
            print("\n‚ö†Ô∏è MQTT n√£o est√° acess√≠vel ou credenciais incorretas")
            return False
        
        # 5. Criar simulador
        print("\n5Ô∏è‚É£ Criando simulador...")
        
        # Pegar primeira placa
        board = boards[0]
        device = None
        with devices as repo:
            device = repo.get_by_id(board.device_id)
        
        if not device:
            print("   ‚ùå Dispositivo n√£o encontrado para a placa")
            return False
        
        print(f"   Placa: ID {board.id}")
        print(f"   Device: {device.name} (UUID: {device.uuid})")
        
        # Criar manager
        manager = RelaySimulatorManager(
            mqtt_host=os.getenv("MQTT_BROKER", "localhost"),
            mqtt_port=int(os.getenv("MQTT_PORT", "1883")),
            mqtt_username=os.getenv("MQTT_USERNAME"),
            mqtt_password=os.getenv("MQTT_PASSWORD")
        )
        
        # Criar simulador
        print(f"\n   Criando simulador para board_id={board.id}...")
        simulator = await manager.create_simulator(
            board_id=board.id,
            device_uuid=device.uuid,
            total_channels=board.total_channels
        )
        
        if simulator:
            print("   ‚úÖ Simulador criado com sucesso!")
            print(f"   Status: {simulator.get_status()}")
            
            # Testar comando
            print("\n6Ô∏è‚É£ Testando comando de rel√©...")
            await simulator.set_relay_state(1, True)
            await asyncio.sleep(1)
            print(f"   Estado canal 1: {simulator.channel_states[1]}")
            
            # Desconectar
            print("\n7Ô∏è‚É£ Desconectando...")
            await simulator.disconnect()
            print("   ‚úÖ Desconectado")
            
            return True
        else:
            print("   ‚ùå Falha ao criar simulador")
            return False
            
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_simulator())
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ TESTE CONCLU√çDO COM SUCESSO")
    else:
        print("‚ùå TESTE FALHOU")
        print("\nüí° Poss√≠veis solu√ß√µes:")
        print("   1. Verificar se o Mosquitto est√° rodando")
        print("   2. Confirmar credenciais MQTT no .env")
        print("   3. Cadastrar uma placa de rel√© no sistema")
        print("   4. Verificar logs do backend para mais detalhes")
    
    sys.exit(0 if success else 1)